#! /usr/bin/env bash

# abort on nonzero exitstatus
set -o errexit
# abort on unbound variable
set -o nounset
# don't hide errors within pipes
set -o pipefail

readonly script_dir=$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )
readonly ck_info_plist="${script_dir}/CameraKit/CameraKit/Sources/SCSDKCameraKit.xcframework/ios-x86_64-simulator/SCSDKCameraKit.framework/Info.plist"

ck_fetch_latest() {
	local gcs_packages="gs://snapengine-maven-publish/camera-kit-ios/releases/${CAMERA_KIT_COMMIT}/${CAMERA_KIT_BUILD}/packages.zip"
	local sources_dir="${script_dir}/CameraKit"
	local packages_zip="${sources_dir}/packages.zip"

	rm -rf "${sources_dir}"
	mkdir -p "${sources_dir}"

	gsutil cp "${gcs_packages}" "${packages_zip}"

	pushd "${sources_dir}"

	unzip -q "${packages_zip}" "CameraKit/*" "CameraKitReferenceUI/*" "CameraKitReferenceSwiftUI/*"

	rm -f "${packages_zip}"

	popd
}

ck_fetch_if_needed() {
	if [[ -f "${ck_info_plist}" ]]; then
		local ck_framework_version="$(plutil -extract CFBundleVersion xml1 -o - "${ck_info_plist}" | sed -n "s/.*<string>\(.*\)<\/string>.*/\1/p")"
		if [[ "${ck_framework_version}" != "${CAMERA_KIT_BUILD}" ]]; then
			ck_fetch_latest
		fi
	else
		ck_fetch_latest
	fi
}

main() {
	local skip_xcode=$1
	pushd "${script_dir}"
	source ".build"

	ck_fetch_if_needed

	bundle install --path .gem-out
	bundle exec pod install --repo-update

	if [[ $skip_xcode == "0" ]]; then
		open "CameraKitSample.xcworkspace"
	fi
	
	popd
}

skip_xcode_param="0"

# Parse arguments
while [[ $# -gt 0 ]]; do
    key="$1"
    case $key in
    --skip-xcode)
        skip_xcode_param="1"
        shift
        ;;
    *)
        usage
        exit
        ;;
    esac
done

main $skip_xcode_param
