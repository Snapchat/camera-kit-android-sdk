import java.util.regex.Pattern

// Copies all the necessary CameraKit artifacts into an internal maven repository,
// which gets packaged within the "ejected" project so that external users don't need to
// worry about downloading artifacts from some protected repository.
task copyCameraKitDependenciesToBundledRepo() {
    def modules = [
            'camerakit-api',
            'camerakit',
            'camerakit-kotlin',
            'lenses-bundle',
            'support-camera-layout',
            'support-camera-activity',
            'support-camerax',
            'support-arcore',
            'support-snap-button',
            'support-gms-location',
            'support-permissions',
            'support-lenses-carousel',
            'camerakit-plugin-api'
    ]
    def baseUri = "${snapMavenUri.replace('gcs', 'gs')}/com/snap/camerakit"
    def baseOutputDir = new File(bundledMavenRepo, '/com/snap/camerakit')

    inputs.property('version', cameraKitVersion)
    outputs.dir(baseOutputDir)
    outputs.cacheIf { true }

    doFirst {
        modules.each { module ->
            new File(baseOutputDir, module).mkdirs()
        }
    }
    doLast {
        modules.each { module ->
            // Google Cloud Storage treats + as space :/ therefore we need to convert it back to +
            // upon downloading the files and directories.
            def gcsCameraKitVersion = cameraKitVersion.replace('+', ' ')

            def moduleDir = new File(baseOutputDir, module)
            if (moduleDir.exists()) {
                moduleDir.deleteDir()
            }
            if (!moduleDir.mkdirs()) {
                throw new IOException(
                        "Failed to create directory for artifact module in: $moduleDir")
            }

            project.exec {
                commandLine 'gsutil',
                        '-m',
                        'cp',
                        '-r',
                        "$baseUri/$module/$gcsCameraKitVersion",
                        moduleDir
            }

            def moduleVersionDir = new File(moduleDir, gcsCameraKitVersion)
            def filesToRename = new LinkedHashSet<File>()
            moduleDir.eachFileRecurse { file ->
                filesToRename.add(file)
            }
            // Rename all files first before renaming their directory.
            filesToRename = filesToRename - moduleVersionDir
            filesToRename.each { file ->
                file.renameTo(new File(file.parentFile, file.name.replaceAll("\\s+", '+')))
            }
            moduleVersionDir.renameTo(new File(
                    moduleVersionDir.parentFile,
                    moduleVersionDir.name.replaceAll("\\s+", '+')
            ))
        }
    }
}

def stripTagStartPlainComment = '//internal>'
def stripTagEndPlainComment = '//<internal'

task eject(type: Copy) {
    dependsOn copyCameraKitDependenciesToBundledRepo

    def outputDir = project.hasProperty('outputDir') ?
            project.getProperty('outputDir') :
            "$buildDir/eject"

    inputs.property('version', cameraKitVersion)
    outputs.dir(outputDir)
    outputs.cacheIf { true }

    from rootProject.projectDir
    into outputDir
    exclude gitignoreToList(file('.gitignore'))
    exclude 'eject.gradle'
    exclude '**/*proguard-mapping*'
    exclude 'jarRepositories.xml'
    exclude '**/build/**'
    exclude 'camerakit-sample-full/src/staging/**'
    exclude 'camerakit-sample-full/src/androidTest/resources/META-INF/**'

    doFirst {
        logger.lifecycle("Ejecting to $outputDir")
    }
    doLast {
        def buildFilesToStrip = [
            new Tuple3(
                new File(outputDir, 'build.gradle'), 
                stripTagStartPlainComment, 
                stripTagEndPlainComment
            ), 
            new Tuple3(
                new File(outputDir, 'camerakit-sample-full/build.gradle'),
                stripTagStartPlainComment, 
                stripTagEndPlainComment
            ),
            new Tuple3(
                new File(outputDir, 'camerakit-sample-simple/build.gradle'),
                stripTagStartPlainComment,
                stripTagEndPlainComment
            )
        ]
        buildFilesToStrip.each { tuple -> 
            def file = tuple.first
            def startTag = tuple.second
            def endTag = tuple.third
            def stripped = stripBlockWithin(file.text, startTag, endTag)
            file.write(stripped)
        }
    }
}

task ejectDocs(type: Copy) {
    dependsOn copyCameraKitDependenciesToBundledRepo

    def outputDir = project.hasProperty('outputDir') ?
            project.getProperty('outputDir') :
            "$buildDir/exported-docs"

    inputs.property('version', cameraKitVersion)
    outputs.dir(outputDir)
    outputs.cacheIf { true }

    from zipTree(new File(
            bundledMavenRepo,
            "/com/snap/camerakit/camerakit/$cameraKitVersion/camerakit-$cameraKitVersion-documentation.zip"
    ))
    into outputDir

    doFirst {
        logger.lifecycle("Ejecting docs to $outputDir")
    }
}

def static gitignoreToList(File file) {
    def ignores = []
    file.eachLine { line ->
        if (!line.startsWith('#') && !line.isEmpty()) {
            ignores.add(line)
        }
    }
    return ignores
}

def static stripBlockWithin(String text, String start, String end) {
    def d1 = Pattern.quote(start)
    def d2 = Pattern.quote(end)
    def r = Pattern.compile("""(?s)$d1.*?$d2""")
    return text.replaceAll(r, "")
}
