//dev>
buildscript {
    dependencies {
        //noinspection GradleDynamicVersion
        classpath('com.snap.karma:karma-gradle-plugin:0.20.1+b493410.401') {
            exclude group: "com.google.guava", module: "guava"
        }
    }
}
//<dev
apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
//dev>
apply plugin: 'com.snap.karma'
//<dev
android {
    compileSdkVersion androidCompileSdkVersion

    defaultConfig {
        applicationId 'com.snap.camerakit.sample.full'
        minSdkVersion androidMinSdkVersion
        targetSdkVersion androidTargetSdkVersion
        versionCode cameraKitDistributionCode
        versionName cameraKitDistributionVersion

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        manifestPlaceholders = [
            'cameraKitApplicationId': cameraKitApplicationId,
            'cameraKitApiToken': cameraKitApiToken
        ]

        buildConfigField 'String', "LENS_GROUP_ID_TEST", "\"$cameraKitLensesGroupId\""
        //dev>
        buildConfigField 'String', "LENS_GROUP_ID_TEST", "\"com.snap.camerakit.extension.lenses.injected,$cameraKitLensesGroupId\""
        //<dev
        buildConfigField 'String', "LENS_GROUP_ID_AR_CORE", "\"$cameraKitLensesGroupIdArCore\""
    }

    testBuildType = project.hasProperty('testBuildType') ? project.property('testBuildType') : 'debug'

    buildTypes {
        debug {}
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            if (testBuildType == 'release') {
                proguardFiles += 'proguard-rules-instrumentation.pro'
            }
            signingConfig signingConfigs.debug
        }
        //dev>
        staging {
            initWith release
            applicationIdSuffix '.staging'
            manifestPlaceholders = [
                'cameraKitRemoteServiceGateway': cameraKitRemoteServiceGateway,
                'cameraKitRemoteServiceAuthority': cameraKitRemoteServiceAuthority,
                'cameraKitRemoteAccessToken': cameraKitRemoteAccessToken
            ]
        }
        //<dev
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    signingConfigs {
        debug {
            storeFile rootProject.file('debug.keystore')
            storePassword "android"
            keyAlias "androiddebugkey"
            keyPassword "android"
        }
    }
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlinVersion"
    implementation "androidx.core:core-ktx:$ktxVersion"
    implementation "androidx.appcompat:appcompat:$appCompatVersion"
    implementation "androidx.constraintlayout:constraintlayout:$constraintLayoutVersion"
    implementation "androidx.drawerlayout:drawerlayout:$drawerLayoutVersion"
    implementation "com.google.android.material:material:$materialVersion"
    implementation "androidx.recyclerview:recyclerview:$recyclerViewVersion"
    implementation "com.github.bumptech.glide:glide:$glideVersion"
    implementation "com.google.android.exoplayer:exoplayer-core:$exoPlayerVersion"
    implementation "com.google.android.exoplayer:exoplayer-ui:$exoPlayerVersion"
    implementation "com.google.android.gms:play-services-vision:$gmsVisionVersion"

    // The main CameraKit artifact that provides all the core functionality.
    // It is not necessary to define it here if support-camera-layout artifact is
    // used as it transitively depends on it, however it is kept for the reference.
    implementation "com.snap.camerakit:camerakit:$cameraKitVersion"
    // Provides convenience Kotlin specific extensions to the public CameraKit API.
    implementation "com.snap.camerakit:camerakit-kotlin:$cameraKitVersion"
    // Provides an opinionated but extensible implementation that wraps
    // camera as well as CameraKit Session management with a View that can be
    // embedded into any Activity or Fragment where CameraKit integration is needed.
    implementation "com.snap.camerakit:support-camera-layout:$cameraKitVersion"
    // Optional dependency that provides location access to certain lenses.
    // Used by the support-camera-layout when creating the Source<LocationProcessor>
    // for the CameraKit Session, if removed, falls back to default, no-op implementation.
    implementation "com.snap.camerakit:support-gms-location:$cameraKitVersion"
    // Optional dependency that provides ArCore backed Source<ImageProcessor> to enable
    // depth and other ArCore specific features in lenses that require them.
    // Used by the support-camera-layout but can be safely removed if not needed.
    implementation "com.snap.camerakit:support-arcore:$cameraKitVersion"
    // Optional dependency that provides customizable lenses carousel view.
    implementation "com.snap.camerakit:support-lenses-carousel:$cameraKitVersion"
    implementation "com.snap.camerakit:lenses-bundle:$cameraKitVersion"
    //dev>
    implementation "com.snap.camerakit:camerakit-extension-debug:$cameraKitVersion"
    //<dev

    androidTestImplementation 'androidx.test.ext:junit:1.1.2'
    androidTestImplementation 'androidx.test:runner:1.3.0'
    androidTestImplementation 'androidx.test:rules:1.3.0'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.3.0'
    androidTestImplementation 'androidx.test.uiautomator:uiautomator:2.2.0'
    androidTestImplementation "org.jetbrains.kotlin:kotlin-test:$kotlinVersion"
}
//dev>
def karmaServiceAccount = System.getenv('KARMA_SERVICE_ACCOUNT')
        ?: 'gcloud auth list --filter=status:ACTIVE --format=value(account)'.execute().text.trim()
def karmaDeviceName = System.getenv('KARMA_DEVICE_NAME') ?: 'dreamlte'
def karmaDevicePool = System.getenv('KARMA_DEVICE_POOL') ?: 'SM-G950F-dreamlte-7'

karma {
    initiator karmaServiceAccount
    serviceAccount = karmaServiceAccount
    useAutopilot = true
    suites {
        from(file('src/androidTest/resources/META-INF/ui-test-metadata-v2.json')) {
            runner('spoon2') {
                testApk = file("build/outputs/apk/androidTest/${android.testBuildType}/${project.name}-${android.testBuildType}-androidTest.apk")
                apks += file("build/outputs/apk/${android.testBuildType}/${project.name}-${android.testBuildType}.apk")
                recordVideo = true
            }
            device { testCase ->
                name = karmaDeviceName
                pool = karmaDevicePool
            }
        }
    }
}

tasks.withType(com.snap.karma.KarmaTestTask).configureEach {
    dependsOn(
            "assemble${android.testBuildType.capitalize()}",
            "assemble${android.testBuildType.capitalize()}AndroidTest"
    )

    doFirst {
        if (karmaServiceAccount == null || karmaServiceAccount.isEmpty()) {
            throw new GradleException(
                    "To trigger tests on Karma, you need a service account or a dev account with an up-to-date Snap " +
                            "personal access token which can be generated using command: `snapaccess credentials refresh`")
        }
    }

    beforeTest { descriptor ->
        logger.lifecycle("Karma test started: ${descriptor.karmaAcceptedTest}")
    }

    afterTest { descriptor, result ->
        if (result.failedTestCount == 0L) {
            logger.lifecycle("Karma test succeeded: ${descriptor.karmaAcceptedTest}")
        } else {
            logger.lifecycle("Karma test failed: ${descriptor.karmaAcceptedTest}")
        }
    }
}
//<dev
